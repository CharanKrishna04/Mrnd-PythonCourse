class Graph:
    def __init__(self,r,c,g):
        self.row=r
        self.col=c
        self.graph=g
        self.stck=[]

    def isSafe(self,i,j,visited):
        return i>=0 and i<self.row and j>=0 and j<self.col and visited[i][j]==False and self.graph[i][j]==1

    def dfs(self,visited,i,j):

        """
        r=[-1, -1, -1, 0, 1, 1, 1, 0]
        c=[-1, 0, 1, 1, 1, 0, -1, -1]
        visited[i][j]=True
        for k in range(8):
            if self.isSafe(i+r[k],j+c[k],visited):
        """
        r = [-1, -1, -1, 0, 1, 1, 1, 0]
        c = [-1, 0, 1, 1, 1, 0, -1, -1]
        self.stck.append((i,j))
        visited[i][j]=True
        while self.stck:
            i,j=self.stck.pop()
            for k in range(8):
                if self.isSafe(i + r[k], j + c[k], visited):
                    visited[i+r[k]][j+c[k]]=True
                    self.stck.append((i+r[k],j+c[k]))



    def countIslands(self):
        visited=[[False for i in range(self.col)] for j in range(self.row)]
        count=0
        for i in range(self.row):
            for j in range(self.col):
                if visited[i][j]==False and self.graph[i][j]==1:
                    self.dfs(visited,i,j)
                    count+=1
        return count


graph = [[1, 1, 0, 0, 0],
         [0, 1, 0, 0, 1],
         [1, 0, 0, 1, 1],
         [0, 0, 0, 0, 0],
         [1, 0, 1, 0, 1]]

row = len(graph)
col = len(graph[0])

g = Graph(row, col, graph)


print(g.countIslands())

d={}
